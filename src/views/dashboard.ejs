<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= guild.name %></title>
    <script src="https://cdn.socket.io/4.7.1/socket.io.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <link rel="stylesheet" type="text/css" href="/static/css/styles.css">
    <link rel="stylesheet" type="text/css" href="/static/css/dashboard.css">
    <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons+Outlined">
</head>
<body>
    <header>
        <a id="home-button" href="<%= URL %>/">
            <span class="material-icons-outlined">
                home
            </span>
        </a>
        <div id="search-bar">
            <input type="text" id="search-song-edit" placeholder="Enter Youtube-URL or song name...">
            <button id="play-song-button">
                <span class="material-icons-outlined">
                    play_circle
                </span>
            </button>
            <button id="save-song-button">
                <span class="material-icons-outlined">
                    bookmarks
                </span>
            </button>
        </div>
        <div class="channel-select-container">
            <label for="voice-channel-select">Voice:</label>
            <select class="channel-select" id="voice-channel-select" name="voice-channel">
                <option value="" disabled selected>Select a voice channel</option>
                <% guild?.voiceChannels?.forEach(channel => { %>
                    <option value="<%= channel.id %>"><%= channel.name%></option>
                <% }); %>
            </select>
            <button id="channel-join-button">Join</button>
            <label for="text-channel-select">Text:</label>
            <select class="channel-select" id="text-channel-select" name="text-channel" disabled>
                <option value="" disabled selected>Select a text channel</option>
                <% guild?.textChannels?.forEach(channel => { %>
                    <option value="<%= channel.id %>"><%= channel.name%></option>
                <% }); %>
            </select>
        </div>
    </header>
    <div id="main-container">
        <div id="queue-container">
            <template id="queue-item-template">
                <div class="queue-item">
                    <div class="queue-item-info">
                        <h4>Song Title</h4>
                        <div class="queue-item-duration">2:30</div>
                    </div>
                    <button>
                        <span class="material-icons-outlined">
                            delete
                        </span>
                    </button>
                </div>
            </template>
        </div>
        <div id="bookmarks-container">
            <template id="bookmark-template">
                <div class="bookmark-container">
                    <div class="image-wrapper">
                        <img src="">
                        <p class="start-time"></p>
                    </div>
                    <a href=""></a>
                    <button class="remove-bookmark song-button" title="Remove song from your bookmarks">
                        <span class="material-icons-outlined">close</span>
                    </button>
                    <div class="buttons-container">
                        <button class="play-immediatly song-button" title="Play song immediatly">
                            <span class="material-icons-outlined">skip_next</span>
                        </button>
                        <button class="add-to-queue song-button" title="Add song to queue">
                            <span class="material-icons-outlined">playlist_add</span>
                        </button>
                    </div>
                </div>
            </template>
        </div>
    </div>
    <footer>
        <div class="footer-container">
            <div id="current-song-container">
                <img src="" alt="Album Art" id="current-song-thumbnail">
                <div id="current-song-info">
                    <p id="current-song-title">Song Title</p>
                    <progress id="current-song-progress-bar" value="50" max="100"></progress>
                </div>
                <div id="current-song-gradient"></div>
            </div>
            <div id="playback-button-container">
                <button id="loop-button">
                    <span class="material-icons-outlined">
                        repeat
                    </span>
                    <span class="material-icons-outlined" style="display: none;">
                        repeat_on
                    </span>
                </button>
                <button id="pause-button">
                    <span class="material-icons-outlined" style="display: none;">
                        pause
                    </span>
                    <span class="material-icons-outlined">
                        play_arrow
                    </span>
                </button>
                <button id="skip-button">
                    <span class="material-icons-outlined">
                        skip_next
                    </span>
                </button>
            </div>
        </div>
    </footer>
    <script>
        const GUILD_ID = "<%= guild.id %>";
        const API_URL = "<%= URL %>";

        // CONST's

        // HEADER
        // SEARCH-BAR
        const searchSongEdit = document.getElementById("search-song-edit");
        const playSongButton = document.getElementById("play-song-button");
        const saveSongButton = document.getElementById("save-song-button");
        // CHANNEL SELECT
        const voiceChannelSelect = document.getElementById("voice-channel-select");
        const textChannelSelect = document.getElementById("text-channel-select");
        const joinChannelButton = document.getElementById("channel-join-button");


        // MAIN-CONTENT
        // QUEUE
        const queueContainer = document.getElementById("queue-container");
        const queueItemTemplate = document.getElementById("queue-item-template");
        // SONG-BOOKMARKS
        const bookmarksContainer = document.getElementById("bookmarks-container");
        const bookmarkTemplate = document.getElementById("bookmark-template");


        // FOOTER
        // CURRENT-SONG
        const currentSongThumbnail = document.getElementById("current-song-thumbnail");
        const currentSongTitle = document.getElementById("current-song-title");
        const currentSongProgressBar = document.getElementById("song-progress");
        // PLAYBACK-BUTTONS
        const loopButton = document.getElementById("loop-button");
        const pauseButton = document.getElementById("pause-button");
        const skipButton = document.getElementById("skip-button");



        // CALLBACKS

        // HEADER
        // SEARCH-BAR
        playSongButton.addEventListener("click", function() {
            playSong(searchSongEdit.value);
            searchSongEdit.value = "";
        });
        saveSongButton.addEventListener("click", function() {
            axios.post(`${API_URL}/query`, {
                query: searchSongEdit.value,
            }, {
                headers: { "Content-Type": "application/json" }
            })
            .then(response => {
                bookmarks.set(response.data.url, response.data);
                localStorage.setItem("bookmarks", JSON.stringify(Array.from(bookmarks)));
                createBookmarkElement(response.data);
            })
            .catch(error => console.error("[Error][Search Song]", error));

            searchSongEdit.value = "";
        });

        // CHANNEL SELECT
        voiceChannelSelect.addEventListener("change", function() {
            if (queueState?.voiceChannel?.id === voiceChannelSelect.value) {
                joinChannelButton.classList.add("stop-button");
                joinChannelButton.innerText = "Stop";
            } else {
                joinChannelButton.classList.remove("stop-button");
                joinChannelButton.innerText = "Join";
            }
        });

        joinChannelButton.addEventListener("click", function() {
            if (queueState?.voiceChannel?.id === voiceChannelSelect.value) {
                axios.post(`${API_URL}/stop`, { guildId: GUILD_ID }, {
                    headers: { "Content-Type": "application/json" }
                })
                .catch(error => console.error("[Error][Disconnect]", error));
            } else {
                axios.post(`${API_URL}/join`, { 
                    guildId: GUILD_ID, 
                    channelId: voiceChannelSelect.value 
                }, {
                    headers: { "Content-Type": "application/json" }
                })
                .catch(error => console.error("[Error][Join Channel]", error));
            }
        });


        //FOOTER
        // PLAYBACK-BUTTONS
        function playBackButtons(button, endpoint) {
            button.disabled = true;

            axios.post(`${API_URL}/${endpoint}`, {
                guildId: GUILD_ID,
                channelId: voiceChannelSelect.value
            }, {
                headers: { "Content-Type": "application/json" }
            })
            .catch(error => console.error(`[Error][${endpoint} Button]`, error))
            .finally(() => {
                button.disabled = false
            });
        }
        loopButton.addEventListener("click", () => playBackButtons(loopButton, "loop"));
        pauseButton.addEventListener("click", () => playBackButtons(pauseButton, "pause-toggle"));
        skipButton.addEventListener("click", () => playBackButtons(skipButton, "skip"));



        let bookmarks = new Map(JSON.parse(localStorage.getItem("bookmarks") || "[]"));
        bookmarks.forEach(bookmark => {
            createBookmarkElement(bookmark);
        });

        let socketIo = null;
        initSocketIO(GUILD_ID);

        let songBarInterval = null;
        let progress = 0;
        let queueState = null;

        function initSocketIO(GUILD_ID) {
            socket = io(API_URL);

            socket.on("connect", () => {
                console.log("Connected to socket server!");
            });
            socket.on("init", (message, callback) => {
                console.log("Server says: ", message);
                callback(GUILD_ID);
            });

            socket.on("state-change", (info) => {
                queueState = info;
                console.log("State change", info);

                if (queueState?.voiceChannel?.id === voiceChannelSelect.value) {
                    joinChannelButton.classList.add("stop-button");
                    joinChannelButton.innerText = "Stop";
                } else {
                    joinChannelButton.classList.remove("stop-button");
                    joinChannelButton.innerText = "Join";
                }

                if(!info) return;

                if(info.queueInfo) {
                    queueContainer.innerHTML = "";
                    info.queueInfo?.songs.forEach((song, index) => {
                        if(index === 0) return;
                        createQueueElement(song, index);
                    });

                    setButtonState(pauseButton, info.queueInfo.paused);
                    setButtonState(loopButton, info.queueInfo.looping);

                    const currentSong = info.queueInfo?.songs[0];

                    if(currentSong) {
                        currentSongTitle.innerText = currentSong.title || "No song";

                        currentSongThumbnail.src = currentSong.thumbnail;

                        // clearInterval(songBarInterval);
                        // progress = info.queueInfo?.currentTime;
                        // currentSongProgressBar.max = currentSong.duration;
                        // songBarInterval = setInterval(function() {
                        //     progress += 1;
                        //     currentSongProgressBar.value = progress;
                        // }, 1000);
                    }
                }

                if(info.voiceChannel) {
                    voiceChannelSelect.value = info.voiceChannel.id;
                }

                if(info.queueInfo?.textChannel) {
                    textChannel.value = info.queueInfo.textChannel.id;
                }
            });

            return socket;
        }

        function createBookmarkElement(songInfo) {
            console.log(songInfo);
            const template = bookmarkTemplate;
            const clone = template.content.cloneNode(true);

            const thumbnail = clone.querySelector("img");
            thumbnail.src = songInfo.thumbnail;

            if(songInfo.startTime) {
                const startTime = clone.querySelector(".start-time");

                if(songInfo.startTime < 3600) {
                    startTime.innerText = "+ " + new Date(songInfo.startTime * 1000).toISOString().substring(14, 19);
                } else {
                    startTime.innerText = "+ " + new Date(songInfo.startTime * 1000).toISOString().substring(11, 16);
                }
            }

            const title = clone.querySelector("a");
            title.href = songInfo.url;
            title.innerText = songInfo.title;

            const removeBookmarkButton = clone.querySelector(".remove-bookmark");
            removeBookmarkButton.addEventListener("click", (event) => {
                const bookmark = event.target.closest(".bookmark-container");
                bookmark?.remove();

                bookmarks.delete(songInfo.url);
                localStorage.setItem("bookmarks", JSON.stringify(Array.from(bookmarks)));
            })

            const playImmediatlyButton = clone.querySelector(".play-immediatly");
            playImmediatlyButton.addEventListener("click", () => {
                console.log("PLAY NOW!");
                axios.post(`${API_URL}/play-immediately`, {
                    guildId: GUILD_ID,
                    song: songInfo.url
                }, {
                    headers: { "Content-Type": "application/json" }
                })
                .catch(error => console.error("[Error][Play Song]", error));
            });

            const addToQueueButton = clone.querySelector(".add-to-queue");
            addToQueueButton.addEventListener("click", () => {
                console.log("ADD TO QUEUE!");
                playSong(songInfo.url, false);
            });

            bookmarksContainer.appendChild(clone);
        }

        // <div class="bookmark-container">
        // <img src="https://i.ytimg.com/vi_webp/isB6-TnWvxc/maxresdefault.webp">
        // <a href="https://www.youtube.com/watch?v=twlM59bD6kM">禁断のレジスタンス(Kindan no Resistance) - 水樹奈々 // covered by 道明寺ここあ</a>
        // <button class="remove-bookmark song-button" title="Remove song from your bookmarks">
        //     <span class="material-icons-outlined">close</span>
        // </button>
        // <div class="buttons-container">
        //     <button class="play-immediatly song-button" title="Play song immediatly">
        //         <span class="material-icons-outlined">skip_next</span>
        //     </button>
        //     <button class="add-to-queue song-button" title="Add song to queue">
        //         <span class="material-icons-outlined">playlist_add</span>
        //     </button>
        // </div>

        function createQueueElement(songInfo, index) {
            console.log(songInfo);
            const template = queueItemTemplate;
            const clone = template.content.cloneNode(true);

            const songTitle = clone.querySelector("h4");
            songTitle.innerText = songInfo.title;

            const duration = clone.querySelector(".queue-item-duration");
            duration.innerText = songInfo.duration;

            const removeButton = clone.querySelector("button");
            removeButton.addEventListener("click", () => removeSongAtIndex(index));

            queueContainer.appendChild(clone);
        }


        function playSong(songUrl, skip = false) {
            console.log("test");
            axios.post(`${API_URL}/add-song`, {
                guildId: GUILD_ID,
                song: songUrl,
                playNow: skip
            }, {
                headers: { "Content-Type": "application/json" }
            })
            .catch(error => console.error("[Error][Play Song]", error));
        }
        
        function setButtonState(button, state) {
            const spans = button.getElementsByTagName("span");

            if(spans.length === 2) {
                spans[0].style.display = state ? "none" : "";
                spans[1].style.display = state ? "" : "none";
            }
        }

        function removeSongAtIndex(index) {
            axios.post(`${API_URL}/remove-at-index`, {
                guildId: GUILD_ID,
                songIndex: index
            }, {
                headers: { "Content-Type": "application/json" }
            })
            .catch(error => console.error("[Error][Join Channel]", error));
        }
    </script>
</body>
</html>